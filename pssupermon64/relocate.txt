0000 |          |             | ; DG 20230510 From relocate.asm
0000 |          |             | 
0000 |          |             | ; ----------------------------------------------------------------------------
0000 |          |             | ; variables
0000 |          |             | 
0000 |          |             | SOURCE  = $22               ; first temp variable
0000 |          |             | TOPMEM  = $24               ; highest address available to BASIC
0000 |          |             | LASTBYT = $26               ; previous byte encountered
0000 |          |             | VARTAB  = $2D               ; pointer to start of BASIC variable storage area
0000 |          |             | FRETOP  = $33               ; pointer to bottom of string text storage area
0000 |          |             | TARGET  = $37               ; end of basic memory/start of machine code (aka MEMSIZ)
0000 |          |             | 
0000 |          |             | ; ----------------------------------------------------------------------------
0000 |          |             | ; basic header
0000 |          |             | 
0801 |          |             |         * = $0801
0801 |          |             | 
0801 |          |             |         ; 100 PRINT "{DOWN}SUPERMON+64    JIM BUTTERFIELD"
0801 |          |             |         ; 110 SYS(PEEK(43)+256*PEEK(44)+71)
0801 |          |             | 
0801 |          |             |         ;.BYTE $29,$08,$64,$00,$99,$20,$22,$11
0801 | 29       |             |         DATA.b $29
0802 | 08       |             |         DATA.b $08
0803 | 64       |             |         DATA.b $64
0804 | 00       |             |         DATA.b $00
0805 | 99       |             |         DATA.b $99
0806 | 20       |             |         DATA.b $20
0807 | 22       |             |         DATA.b $22
0808 | 11       |             |         DATA.b $11
0809 |          |             | 
0809 |          |             |         ; .TEXT "SUPERMON+64    JIM BUTTERFIELD"
0809 | 53       |             |         DATA.b 'S'
080A | 55       |             |         DATA.b 'U'
080B | 50       |             |         DATA.b 'P'
080C | 45       |             |         DATA.b 'E'
080D | 52       |             |         DATA.b 'R'
080E | 4D       |             |         DATA.b 'M'
080F | 4F       |             |         DATA.b 'O'
0810 | 4E       |             |         DATA.b 'N'
0811 | 2B       |             |         DATA.b '+'
0812 | 36       |             |         DATA.b '6'
0813 | 34       |             |         DATA.b '4'
0814 | 20       |             |         DATA.b ' '
0815 | 20       |             |         DATA.b ' '
0816 | 20       |             |         DATA.b ' '
0817 | 20       |             |         DATA.b ' '
0818 | 4A       |             |         DATA.b 'J'
0819 | 49       |             |         DATA.b 'I'
081A | 4D       |             |         DATA.b 'M'
081B | 20       |             |         DATA.b ' '
081C | 42       |             |         DATA.b 'B'
081D | 55       |             |         DATA.b 'U'
081E | 54       |             |         DATA.b 'T'
081F | 54       |             |         DATA.b 'T'
0820 | 45       |             |         DATA.b 'E'
0821 | 52       |             |         DATA.b 'R'
0822 | 46       |             |         DATA.b 'F'
0823 | 49       |             |         DATA.b 'I'
0824 | 45       |             |         DATA.b 'E'
0825 | 4C       |             |         DATA.b 'L'
0826 | 44       |             |         DATA.b 'D'
0827 |          |             |  
0827 |          |             |         ; .BYTE $22,$00,$43,$08,$6E,$00,$9E,$28
0827 | 22       |             |         DATA.b $22
0828 | 00       |             |         DATA.b $00
0829 | 43       |             |         DATA.b $43
082A | 08       |             |         DATA.b $08
082B | 6E       |             |         DATA.b $6E
082C | 00       |             |         DATA.b $00
082D | 9E       |             |         DATA.b $9E
082E | 28       |             |         DATA.b $28
082F |          |             | 
082F |          |             |         ; .BYTE $C2,$28,$34,$33,$29,$AA,$32,$35
082F | C2       |             |         DATA.b $C2
0830 | 28       |             |         DATA.b $28
0831 | 34       |             |         DATA.b $34
0832 | 33       |             |         DATA.b $33
0833 | 29       |             |         DATA.b $29
0834 | AA       |             |         DATA.b $AA
0835 | 32       |             |         DATA.b $32
0836 | 35       |             |         DATA.b $35
0837 |          |             | 
0837 |          |             |         ; .BYTE $36,$AC,$C2,$28,$34,$34,$29,$AA
0837 | 36       |             |         DATA.b $36
0838 | AC       |             |         DATA.b $AC
0839 | C2       |             |         DATA.b $C2
083A | 28       |             |         DATA.b $28
083B | 34       |             |         DATA.b $34
083C | 34       |             |         DATA.b $34
083D | 29       |             |         DATA.b $29
083E | AA       |             |         DATA.b $AA
083F |          |             | 
083F |          |             |         ; .BYTE $37,$31,$29,$00,$00,$00,$00,$00
083F | 37       |             |         DATA.b $37
0840 | 31       |             |         DATA.b $31
0841 | 29       |             |         DATA.b $29
0842 | 00       |             |         DATA.b $00
0843 | 00       |             |         DATA.b $00
0844 | 00       |             |         DATA.b $00
0845 | 00       |             |         DATA.b $00
0846 | 00       |             |         DATA.b $00
0847 |          |             | 
0847 |          |             |         ; .BYTE $00
0847 | 00       |             |         DATA.b $00
0848 |          |             | 
0848 |          |             | ; ----------------------------------------------------------------------------
0848 |          |             | ; relocator stub
0848 |          |             | 
0848 | A5 2D    | LDA $2D     |         LDA.zp VARTAB          ; start copying from the start of basic variables
084A | 85 22    | STA $22     |         STA.zp SOURCE
084C | A5 2E    | LDA $2E     |         LDA.zp VARTAB+1
084E | 85 23    | STA $23     |         STA.zp SOURCE+1
0850 | A5 37    | LDA $37     |         LDA.zp TARGET          ; start copying to the end of BASIC memory
0852 | 85 24    | STA $24     |         STA.zp TOPMEM
0854 | A5 38    | LDA $38     |         LDA.zp TARGET+1
0856 | 85 25    | STA $25     |         STA.zp TOPMEM+1
0858 | A0 00    | LDY #$00    | LOOP:   LDY.# $00            ; no offset from pointers
085A | A5 22    | LDA $22     |         LDA.zp SOURCE          ; decrement two-byte source address
085C | D0 02    | BNE $02     |         BNE NB1
085E | C6 23    | DEC $23     |         DEC.zp SOURCE+1
0860 | C6 22    | DEC $22     | NB1:    DEC.zp SOURCE
0862 | B1 22    | LDA ($22),Y |         LDA.i,Y SOURCE      ; get byte currently pointed to by SOURCE
0864 | C9 36    | CMP #$36    |         CMP.# $36            ; check for address marker ($36)
0866 | D0 2F    | BNE $2F     |         BNE NOADJ           ; skip address adjustment unless found
0868 | A5 22    | LDA $22     |         LDA.zp SOURCE          ; decrement two-byte source address
086A | D0 02    | BNE $02     |         BNE NB2
086C | C6 23    | DEC $23     |         DEC.zp SOURCE+1
086E | C6 22    | DEC $22     | NB2:    DEC.zp SOURCE
0870 | B1 22    | LDA ($22),Y |         LDA.i,Y SOURCE      ; get byte currently pointed to by SOURCE
0872 | C9 36    | CMP #$36    |         CMP.# $36            ; check for second consecutive marker ($36)
0874 | F0 30    | BEQ $30     |         BEQ DONE            ; if found, we're done with relocation
0876 | 85 26    | STA $26     |         STA.zp LASTBYT         ; if not, save byte for later
0878 | A5 22    | LDA $22     |         LDA.zp SOURCE          ; decrement two-byte source address
087A | D0 02    | BNE $02     |         BNE NB3
087C | C6 23    | DEC $23     |         DEC.zp SOURCE+1
087E | C6 22    | DEC $22     | NB3:    DEC.zp SOURCE
0880 | B1 22    | LDA ($22),Y |         LDA.i,Y SOURCE      ; current byte is low byte of relative address
0882 | 18       | CLC         |         CLC 
0883 | 65 24    | ADC $24     |         ADC.zp TOPMEM          ; calc absolute low byte by adding top of memory
0885 | AA       | TAX         |         TAX                 ; save absolute low byte in X
0886 | A5 26    | LDA $26     |         LDA.zp LASTBYT         ; previous byte is high byte of relative address
0888 | 65 25    | ADC $25     |         ADC.zp TOPMEM+1        ; calc absolute high byte by adding top of memory
088A | 48       | PHA         |         PHA                 ; save absolute high byte on stack
088B | A5 37    | LDA $37     |         LDA.zp TARGET          ; decrement two-byte target address
088D | D0 02    | BNE $02     |         BNE NB4
088F | C6 38    | DEC $38     |         DEC.zp TARGET+1
0891 | C6 37    | DEC $37     | NB4:    DEC.zp TARGET
0893 | 68       | PLA         |         PLA                 ; retrieve absolute high byte from stack
0894 | 91 37    | STA ($37),Y |         STA.i,Y TARGET      ; save it to the target address
0896 | 8A       | TXA         |         TXA                 ; retrieve absolute low byte from stack
0897 | 48       | PHA         | NOADJ:  PHA                 ; save current byte on stack
0898 | A5 37    | LDA $37     |         LDA.zp TARGET          ; decrement two-byte target address
089A | D0 02    | BNE $02     |         BNE NB5
089C | C6 38    | DEC $38     |         DEC.zp TARGET+1
089E | C6 37    | DEC $37     | NB5:    DEC.zp TARGET
08A0 | 68       | PLA         |         PLA                 ; retrieve current byte from stack
08A1 | 91 37    | STA ($37),Y |         STA.i,Y TARGET      ; save it in the target address
08A3 | 18       | CLC         |         CLC                 ; clear carry for unconditional loop
08A4 | 90 B2    | BCC $B2     |         BCC LOOP            ; rinse, repeat
08A6 | A5 37    | LDA $37     | DONE:   LDA.zp TARGET          ; fix pointer to string storage
08A8 | 85 33    | STA $33     |         STA.zp FRETOP
08AA | A5 38    | LDA $38     |         LDA.zp TARGET+1
08AC | 85 34    | STA $34     |         STA.zp FRETOP+1
08AE | 6C 37 00 | JMP ($0037) |         JMP.i TARGET        ; jump to the beginning of the relocated code
08B1 |          |             | 
08B1 |          |             | ; DG 20230510 0539 - Completed Relocate.asm - Used BeyondCompare to confirm
08B1 |          |             | ;                    generated prg (178 bytes of 3,171)
