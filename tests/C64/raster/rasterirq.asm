* = $0801

#INCLUDE ..\includes.h

@BASICSTUB()

            SEI        ;disable maskable IRQs

            LDA.#   $7F
            STA     CIA1_IRQ_CONTROL  ;disable timer interrupts which can be generated by the two CIA chips
            STA     CIA2_IRQ_CONTROL  ;the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better
                       ;stop it.

            LDA     CIA1_IRQ_CONTROL  ;by reading this two registers we negate any pending CIA irqs.
            LDA     CIA2_IRQ_CONTROL  ;if we don't do this, a pending CIA irq might occur after we finish setting up our irq.
                       ;we don't want that to happen.

            LDA.#   $35   ;we turn off the BASIC and KERNAL rom here
            STA.zp  ZP_6510_PORT_REGISTER    ;the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of
                       ;SID/VICII/etc are visible

            LDA.#   $01   ;this is how to tell the VICII to generate a raster interrupt
            STA     VICII_IMR
            
            
            LDA.#   $1B   ;as there are more than 256 rasterlines, the topmost bit of $d011 serves as
            STA     VICII_CONTROL_1  ;the 9th bit for the rasterline we want our irq to be triggered.
                       ;here we simply set up a character screen, leaving the topmost bit 0.

            @SET_RASTER_IRQ(0,IRQ0)

            CLI        ;enable maskable interrupts again

FOREVER:    JMP FOREVER 

IRQ0:       @CLEAR_RASTER_IRQ()
            @SET_BORDER_COLOR(VICII_COLOR_RED)
            @SET_RASTER_IRQ(51,IRQ51)
            RTI
            
IRQ51:      @CLEAR_RASTER_IRQ()
            @SET_BORDER_COLOR(VICII_COLOR_GREEN)
            @SET_RASTER_IRQ(250,IRQ250)
            RTI
            
IRQ250:     @CLEAR_RASTER_IRQ()
            @SET_BORDER_COLOR(VICII_COLOR_YELLOW)
            @SET_RASTER_IRQ(0,IRQ0)
            RTI